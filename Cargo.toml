[package]
name = "diskann"
version = "0.1.0"
edition = "2021"
authors = ["DiskANN Rust Contributors"]
description = "Pure Rust implementation of DiskANN with ARM64 NEON optimizations"
repository = "https://github.com/yourusername/diskann-rust-neon"
license = "MIT"
keywords = ["vector-search", "ann", "nearest-neighbor", "neon", "simd"]
categories = ["algorithms", "data-structures", "science"]

[features]
default = ["parallel", "neon"]
neon = []  # ARM64 NEON support
avx2 = []  # x86-64 AVX2 support
avx512 = []  # x86-64 AVX-512 support
sse42 = []  # x86-64 SSE4.2 support (broad compatibility)
fma4 = []  # AMD FMA4 support (Bulldozer/Piledriver)
sve = []  # ARM64 SVE support (future)
amx = []  # Intel AMX support (future)
webgpu = ["dep:wgpu"]  # Cross-platform GPU support
cuda = ["dep:cudarc"]  # NVIDIA CUDA support
rocm = []  # AMD ROCm support (stub implementation)
metal = ["dep:metal"]  # Apple Metal support
opencl = ["dep:opencl3"]  # OpenCL support
parallel = ["dep:rayon", "dep:num_cpus"]
python = ["dep:pyo3"]
c-api = []

[dependencies]
# Core dependencies
anyhow = "1.0"
thiserror = "1.0"
log = "0.4"
env_logger = "0.11"

# Math and SIMD
num-traits = "0.2"
bytemuck = { version = "1.14", features = ["derive"] }
half = "2.3"
packed_simd_2 = { version = "0.3", optional = true }
wide = "0.7"  # Pure Rust SIMD abstractions

# Parallelism
rayon = { version = "1.8", optional = true }
num_cpus = { version = "1.16", optional = true }
crossbeam-channel = "0.5"
parking_lot = "0.12"

# I/O and serialization
memmap2 = "0.9"
bincode = "1.3"
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
tokio = { version = "1.35", features = ["rt-multi-thread", "io-util", "fs", "time"] }
byteorder = "1.5"
rand = "0.8"
lru = "0.12"
ordered-float = "4.2"
hashbrown = "0.14"

# GPU and accelerated computing
wgpu = { version = "0.19", optional = true } # Cross-platform GPU compute
cudarc = { version = "0.9", optional = true } # NVIDIA CUDA
# Note: ROCm support would use rocm-rs or hip-sys, but they're early stage
# For now, we'll use stub implementation for ROCm
metal = { version = "0.27", optional = true } # Apple Metal
opencl3 = { version = "0.9", optional = true } # OpenCL

# Python bindings
pyo3 = { version = "0.20", features = ["extension-module"], optional = true }

# CLI dependencies
clap = { version = "4.4", features = ["derive", "cargo"] }
indicatif = "0.17"
console = "0.15"
humantime = "2.1"
chrono = { version = "0.4", features = ["serde"] }

[dev-dependencies]
criterion = { version = "0.5", features = ["html_reports"] }
proptest = "1.4"
approx = "0.5"
tempfile = "3.8"
rand = "0.8"
rand_xoshiro = "0.6"
tokio = { version = "1.35", features = ["macros", "rt-multi-thread"] }

[build-dependencies]
cc = "1.0"

[[bench]]
name = "distance"
harness = false

[[bench]]
name = "graph"
harness = false

[[bench]]
name = "index"
harness = false

[[bench]]
name = "comprehensive"
harness = false

[[bin]]
name = "diskann"
path = "src/bin/main.rs"

[[example]]
name = "cold_disk_benchmark"
path = "examples/cold_disk_benchmark.rs"

[[example]]
name = "simd_benchmark"
path = "examples/simd_benchmark.rs"

[[example]]
name = "gpu_vs_cpu"
path = "examples/gpu_vs_cpu.rs"

[[example]]
name = "multi_gpu"
path = "examples/multi_gpu.rs"

[[example]]
name = "platform_specific_gpu"
path = "examples/platform_specific_gpu.rs"

[[example]]
name = "batch_optimization"
path = "examples/batch_optimization.rs"

[[example]]
name = "performance_benchmark"
path = "examples/performance_benchmark.rs"

[profile.release]
lto = "fat"
codegen-units = 1
opt-level = 3

[profile.bench]
lto = "fat"
codegen-units = 1
opt-level = 3
debug = true